#define  _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#define ROW 3
#define COL	3
#include <stdlib.h>
#include<time.h>
//声明
void initboard(char board[ROW][COL], int row, int col);
void displayboard(char board[ROW][COL], int row, int col);
void playermove(char board[ROW][COL], int row, int col);
void computermove(char board[ROW][COL],int row, int col);


//告诉我们四种状态 ：玩家赢'*'，电脑赢'#'，平局'Q'，继续'C'

char is_win(char board[ROW][COL],int row,int col);
#define  _CRT_SECURE_NO_WARNINGS 1
#include"game.h"

void initboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';

		}
	}

}


//void displayboard(char board[ROW][COL], int row, int col)
//{
//	int i = 0;
//	for (i = 0; i < row; i++)
//	{
//		printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
//		if (i<row-1)
//		printf("---|---|---\n");
//		
//	}
//
//
void displayboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j<col-1)
				printf("|"); 
			}
			printf("\n");
		}
	}


}
void playermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走：\n");
	
	while (1)
	{
		printf("请输入要下的坐标：");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row&&y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标被占用\n");
			}
		}
		else
		{
			printf("请输入正确的坐标\n");
		}
	}
}
void computermove(char board[ROW][COL], int row, int col)
{
	printf("电脑走:\n");
	int x = 0;
	int y = 0;

	
	while (1)
	{
		x = rand()%row;
		y = rand() %col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
		
	}
}
//返回1表示满了，返回0表示没满
int isfull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
			}

		}
	}
	return 1; 
}




char is_win(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)//横三行
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2]&&board[i][0]!=' ')
		{
			return board[i][1];
		}

	}
	for (i = 0; i < col; i++)//竖三列
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
		{
			return board[1][i];
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
		return board[1][1];//两个对角线
	//判断是否为平局
	if (1 == isfull(board, ROW, COL))
	{
		return 'Q';
	}
	return 'C';
	
}
#define  _CRT_SECURE_NO_WARNINGS 1

#include"game.h"
void menu()
{
	printf("************************\n");
	printf("*****1.play 0.exit******\n");
	printf("************************\n");
}

void game()
{
	char ret = 0;
	char board[ROW][COL] = { 0 };//全部空格
	initboard(board,ROW,COL);//初始化棋盘
	displayboard(board,ROW,COL);//打印棋盘
	//下棋
	while(1)
	{
		playermove(board,ROW,COL);//玩家走
		displayboard(board, ROW, COL);
		//判断玩家是否赢
		ret = is_win(board,ROW,COL);
		if (ret != 'C')
			break;
		computermove(board, ROW, COL);//电脑走
		displayboard(board, ROW, COL);
		//判断电脑是否赢
		ret=is_win(board, ROW, COL);
		if (ret != 'C')
			break;
	}
	if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢\n");
	}
	else
	printf("平局\n");
}


void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新选择\n");
			break;
		}
	} 
	while (input);
}

int main()
{
	test();
	return 0;
}
