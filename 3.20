#define  _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>


#define row 9
#define col 9
#define easy_count 10
#include<stdlib.h>
#define rows row+2
#define cols col+2


void Initboard(char board[rows][cols], int x, int y,char set);

void Displayboard(char board[rows][cols], int x,int  y);

void setmine(char mine[rows][cols],int a,int b);
void finemine(char mine[rows][cols], char show[rows][cols], int a, int b);

int get_mine_count(char mine[rows][cols], int  x, int y);


#define  _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void Initboard(char board[rows][cols], int x, int y,char set)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			board[i][j] = set;
		}
	}

}

void Displayboard(char board[rows][cols], int x, int  y)
{
	int i = 0;
	int j = 0;
	for (i = 0; i <= y; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1; i <= x; i++)
	{
		printf("%d ", i);
		for (j = 1; j <= y; j++)
		{
			
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}

}
void setmine(char board[rows][cols], int a, int  b)
{
	int count = easy_count;
	while (count)
	{
		int x = rand() % a + 1;//1-9
		int y = rand() % b + 1;
		if (board[x][y] == '0')
		{
			board[x][y] = '1';
			count--;
		}
	}

}
//'1'-'0'=0
int get_mine_count(char mine[rows][cols], int  x, int y)
{
	return mine[x - 1][y] +
		mine[x - 1][y - 1] +
		mine[x][y - 1] +
		mine[x + 1][y - 1] +
		mine[x + 1][y] +
		mine[x + 1][y + 1] +
		mine[x][y + 1] +
		mine[x - 1][y + 1] - 8 * '0';
}



void finemine(char mine[rows][cols], char show[rows][cols], int a, int b)
{
	int x = 0;
	int y = 0;
	int win = 0;

	while (win<a*b-easy_count)
	{
		printf("请输入排查雷的坐标：");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= a&&y >= 1 && y <= b)
		{
			//坐标合法
			if (mine[x][y] == '1')
			{
				printf("遗憾你被炸死了\n");//踩雷
				Displayboard(mine, a, b);
				break;
			}
			else//不是雷
			{
				//计算xy坐标周围几个雷
				int count=get_mine_count(mine, x, y);
				show[x][y] = count + '0';
				Displayboard(show, a, b);
				win++;
			}
		}
		else
		{
			printf("坐标非法，重新输入：");
		}

	}
	if (win == a*b - easy_count)
	{
		printf("恭喜你排雷成功\n");
		Displayboard(mine, a, b);
	}
}

#define  _CRT_SECURE_NO_WARNINGS 1

#include"game.h"
void menu()
{
	printf("*********************\n");
	printf("*****    1.play   ***\n");
	printf("******   0.exit  ****\n");
	printf("*********************\n");
}

void game()
{
	//雷的信息存储,1.布置好的雷的信息 2.排查出的雷的信息
	char mine[rows][cols] = {0}; //11*11
	char show[rows][cols] = { 0 };
	//初始化
	Initboard(mine,rows,cols,'0');
	Initboard(show, rows, cols,'*');
	//打印棋盘
	//Displayboard(mine, row, col);
	Displayboard(show, row, col);
	//布置雷
	setmine(mine, row, col);
	//Displayboard(mine, row, col);
	//扫雷
	finemine(mine,show,row,col);
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误重新选择\n");
			break;
		}
	} while (input);



}
int main()
{
	test();
	return 0;
}
//递归展开-升级
